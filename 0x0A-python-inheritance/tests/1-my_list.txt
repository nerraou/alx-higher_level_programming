>>> MyList = __import__('1-my_list').MyList

>>> type(MyList())
<class '1-my_list.MyList'>

>>> MyList([1, 9], [9, 8])
Traceback (most recent call last):
TypeError: list expected at most 1 argument, got 2

unsorted list
>>> MyList([1, 4, 2, 3, 5]).print_sorted()
[1, 2, 3, 4, 5]

sorted list
>>> MyList([1, 2, 3, 4, 5]).print_sorted()
[1, 2, 3, 4, 5]

one element
>>> MyList([45]).print_sorted()
[45]

empty list
>>> MyList([]).print_sorted()
[]

None
>>> MyList([None]).print_sorted()
[None]

Not a list but a number
>>> MyList("hello").print_sorted()
['e', 'h', 'l', 'l', 'o']

A list of strings
>>> MyList(["hello", "world", "I", "am", "happy"]).print_sorted()
['I', 'am', 'happy', 'hello', 'world']

None and value
>>> MyList([None, 889, 5]).print_sorted()
Traceback (most recent call last):
TypeError: '<' not supported between instances of 'int' and 'NoneType'

type error mixed content
>>> MyList(["hello", 45]).print_sorted()
Traceback (most recent call last):
TypeError: '<' not supported between instances of 'int' and 'str'

type error mixed content
>>> MyList(["hello", 45.9]).print_sorted()
Traceback (most recent call last):
TypeError: '<' not supported between instances of 'float' and 'str'

None
>>> MyList(None).print_sorted()
Traceback (most recent call last):
TypeError: 'NoneType' object is not iterable

Not a list but a number
>>> MyList(1998).print_sorted()
Traceback (most recent call last):
TypeError: 'int' object is not iterable

print print_sorted_method
>>> print(MyList().print_sorted)
<bound method MyList.print_sorted of []>

>>> MyList().print_sorted(1)
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 2 were given

test append method
>>> my_list = MyList()
>>> my_list.append(2)
>>> my_list.append(3)
>>> print(my_list)
[2, 3]

test remove method
>>> my_list = MyList([2, 3])
>>> my_list.remove(2)
>>> print(my_list)
[3]

basic test
>>> MyList([2, 3])
[2, 3]
